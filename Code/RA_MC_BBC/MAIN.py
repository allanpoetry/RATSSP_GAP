from gurobipy import *
import time, copy
from SGAP.Solution_methods.RA_BD.SP import SP
from SGAP.Solution_methods.RA_BD.subtour_check import subtour_check
from SGAP.Solution_methods.RA_MC_BBC.LBL import LBL

# 20 Contact gates
K_E = [1, 2, 3, 4]
K_D = [5, 6, 7, 8, 9, 10, 11, 12, 13]
K_C = [14, 15, 16, 17, 18, 19, 20]
r = [21]
K = K_E + K_D + K_C
K_all = K + r



# S4
F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]
F_size  = [1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1]
F_E = [6, 28, 31]
F_D = [2, 7, 12, 13, 16, 17, 19, 20, 29, 35, 40]
F_C = [1, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 37, 38, 39, 41]
occupy_time  = [93, 88, 104, 83, 114, 75, 81, 108, 68, 64, 109, 107, 85, 104, 74, 103, 118, 72, 88, 84, 111, 75, 86, 66, 114, 74, 102, 96, 110, 65, 81, 110, 88, 84, 68, 73, 103, 117, 68, 117, 73]
scenario_weight = 0.02
OMEGA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
scenario_arrival_time = [[2071, 2072, 2063, 2053, 2045, 2056, 2075, 2063, 2075, 2065, 2067, 2094, 2082, 2089, 2134, 2121, 2092, 2113, 2105, 2140, 2110, 2128, 2140, 2167, 2124, 2121, 2124, 2138, 2154, 2170, 2176, 2146, 2172, 2171, 2175, 2176, 2165, 2203, 2200, 2190, 2220], [2031, 2092, 2059, 2098, 2072, 2063, 2064, 2090, 2072, 2081, 2081, 2127, 2097, 2069, 2115, 2133, 2098, 2089, 2130, 2111, 2118, 2117, 2152, 2142, 2162, 2138, 2149, 2191, 2143, 2150, 2177, 2176, 2200, 2154, 2167, 2168, 2178, 2202, 2208, 2199, 2241], [2047, 2061, 2061, 2059, 2056, 2065, 2092, 2117, 2069, 2084, 2098, 2085, 2087, 2121, 2126, 2111, 2111, 2125, 2132, 2115, 2119, 2149, 2114, 2124, 2121, 2149, 2150, 2133, 2148, 2161, 2168, 2197, 2164, 2162, 2169, 2187, 2163, 2191, 2222, 2206, 2197], [2043, 2050, 2052, 2082, 2070, 2097, 2049, 2072, 2077, 2087, 2077, 2031, 2107, 2114, 2100, 2124, 2097, 2091, 2126, 2129, 2127, 2144, 2106, 2132, 2141, 2151, 2139, 2137, 2160, 2125, 2171, 2167, 2175, 2213, 2219, 2171, 2175, 2195, 2230, 2214, 2212], [2077, 2054, 2079, 2057, 2062, 2072, 2068, 2071, 2079, 2071, 2070, 2068, 2086, 2075, 2081, 2088, 2103, 2107, 2123, 2118, 2119, 2130, 2112, 2108, 2113, 2140, 2153, 2140, 2161, 2150, 2181, 2189, 2167, 2176, 2187, 2194, 2230, 2222, 2211, 2197, 2218], [2044, 2068, 2053, 2066, 2065, 2068, 2073, 2121, 2043, 2076, 2082, 2083, 2066, 2144, 2105, 2121, 2088, 2104, 2138, 2109, 2136, 2121, 2107, 2130, 2142, 2129, 2136, 2148, 2139, 2159, 2172, 2193, 2192, 2160, 2162, 2185, 2152, 2204, 2207, 2215, 2185], [2045, 2084, 2099, 2104, 2052, 2068, 2095, 2072, 2072, 2091, 2061, 2078, 2097, 2109, 2092, 2111, 2128, 2115, 2158, 2105, 2125, 2137, 2126, 2182, 2117, 2140, 2145, 2147, 2146, 2153, 2159, 2139, 2170, 2192, 2170, 2165, 2203, 2199, 2185, 2198, 2269], [2065, 2062, 2077, 2046, 2122, 2116, 2061, 2088, 2077, 2068, 2083, 2077, 2086, 2078, 2127, 2104, 2086, 2097, 2158, 2111, 2113, 2108, 2108, 2120, 2135, 2140, 2118, 2142, 2166, 2142, 2189, 2185, 2208, 2206, 2170, 2159, 2198, 2213, 2206, 2220, 2219], [2049, 2047, 2077, 2072, 2070, 2067, 2062, 2108, 2112, 2068, 2082, 2077, 2073, 2089, 2098, 2110, 2119, 2104, 2124, 2111, 2125, 2113, 2163, 2135, 2103, 2125, 2123, 2189, 2147, 2171, 2145, 2160, 2201, 2165, 2195, 2177, 2172, 2199, 2233, 2237, 2219], [2049, 2054, 2046, 2084, 2085, 2073, 2065, 2121, 2051, 2095, 2089, 2088, 2092, 2107, 2144, 2112, 2102, 2101, 2113, 2124, 2126, 2122, 2147, 2115, 2131, 2133, 2160, 2130, 2165, 2147, 2186, 2165, 2178, 2153, 2175, 2182, 2180, 2244, 2208, 2202, 2209], [2030, 2058, 2043, 2115, 2053, 2051, 2074, 2089, 2091, 2073, 2082, 2085, 2094, 2127, 2106, 2115, 2074, 2115, 2120, 2135, 2136, 2136, 2123, 2107, 2138, 2150, 2162, 2133, 2143, 2157, 2165, 2158, 2159, 2189, 2181, 2163, 2195, 2193, 2223, 2236, 2222], [2050, 2052, 2032, 2104, 2053, 2045, 2074, 2056, 2062, 2070, 2088, 2070, 2113, 2099, 2086, 2129, 2117, 2115, 2110, 2119, 2125, 2141, 2137, 2126, 2135, 2122, 2163, 2129, 2141, 2124, 2165, 2160, 2190, 2177, 2174, 2165, 2174, 2214, 2223, 2242, 2210], [2047, 2111, 2050, 2078, 2082, 2051, 2060, 2111, 2056, 2065, 2092, 2072, 2091, 2075, 2134, 2136, 2091, 2105, 2130, 2136, 2144, 2128, 2152, 2115, 2139, 2137, 2140, 2151, 2143, 2149, 2149, 2200, 2157, 2173, 2157, 2168, 2217, 2198, 2190, 2211, 2211], [2036, 2044, 2028, 2063, 2077, 2068, 2128, 2053, 2064, 2068, 2094, 2068, 2083, 2111, 2112, 2101, 2099, 2094, 2125, 2141, 2103, 2127, 2122, 2113, 2135, 2124, 2153, 2134, 2158, 2177, 2151, 2145, 2198, 2185, 2204, 2184, 2166, 2199, 2194, 2205, 2228], [2051, 2097, 2067, 2057, 2077, 2111, 2089, 2077, 2069, 2055, 2078, 2066, 2103, 2076, 2144, 2104, 2114, 2104, 2120, 2150, 2112, 2137, 2137, 2118, 2145, 2133, 2142, 2160, 2149, 2165, 2160, 2171, 2186, 2177, 2190, 2185, 2189, 2232, 2216, 2215, 2218], [2045, 2061, 2044, 2081, 2067, 2069, 2073, 2056, 2129, 2054, 2043, 2092, 2081, 2097, 2103, 2117, 2110, 2116, 2120, 2109, 2103, 2134, 2118, 2139, 2126, 2160, 2139, 2111, 2172, 2128, 2155, 2173, 2202, 2137, 2202, 2175, 2178, 2225, 2209, 2205, 2240], [2073, 2060, 2043, 2089, 2073, 2032, 2070, 2102, 2095, 2074, 2092, 2085, 2077, 2097, 2076, 2102, 2103, 2112, 2114, 2115, 2132, 2118, 2130, 2126, 2116, 2149, 2147, 2154, 2112, 2160, 2180, 2162, 2177, 2175, 2170, 2179, 2218, 2206, 2191, 2203, 2236], [2043, 2055, 2090, 2082, 2071, 2089, 2110, 2069, 2052, 2079, 2107, 2077, 2082, 2088, 2099, 2123, 2111, 2130, 2104, 2132, 2107, 2142, 2122, 2126, 2132, 2131, 2124, 2147, 2160, 2150, 2145, 2146, 2175, 2193, 2169, 2235, 2204, 2201, 2199, 2203, 2251], [2055, 2024, 2087, 2082, 2057, 2055, 2074, 2058, 2055, 2079, 2077, 2074, 2123, 2080, 2096, 2108, 2125, 2130, 2102, 2112, 2131, 2125, 2136, 2146, 2185, 2173, 2127, 2151, 2192, 2146, 2178, 2166, 2175, 2176, 2175, 2180, 2176, 2192, 2204, 2192, 2229], [2055, 2029, 2070, 2070, 2059, 2085, 2065, 2077, 2084, 2066, 2101, 2094, 2065, 2095, 2102, 2140, 2100, 2150, 2131, 2170, 2104, 2128, 2130, 2168, 2121, 2126, 2166, 2171, 2161, 2149, 2175, 2135, 2193, 2158, 2180, 2177, 2161, 2206, 2204, 2222, 2196], [2085, 2057, 2049, 2075, 2088, 2084, 2067, 2088, 2077, 2079, 2072, 2073, 2076, 2092, 2083, 2106, 2096, 2098, 2101, 2137, 2118, 2157, 2125, 2133, 2164, 2135, 2140, 2166, 2175, 2148, 2177, 2137, 2181, 2192, 2177, 2177, 2178, 2252, 2203, 2196, 2230], [2045, 2067, 2089, 2068, 2066, 2070, 2097, 2091, 2072, 2097, 2112, 2087, 2067, 2124, 2073, 2109, 2096, 2109, 2134, 2118, 2142, 2110, 2140, 2131, 2116, 2142, 2152, 2146, 2150, 2149, 2177, 2145, 2180, 2188, 2188, 2203, 2184, 2203, 2224, 2212, 2237], [2052, 2049, 2050, 2059, 2080, 2070, 2057, 2065, 2071, 2080, 2073, 2113, 2085, 2081, 2104, 2102, 2140, 2109, 2102, 2135, 2120, 2117, 2128, 2125, 2137, 2140, 2134, 2150, 2174, 2166, 2158, 2152, 2167, 2173, 2173, 2184, 2204, 2210, 2206, 2216, 2205], [2039, 2049, 2049, 2076, 2070, 2099, 2054, 2082, 2088, 2070, 2087, 2089, 2085, 2089, 2091, 2105, 2145, 2101, 2114, 2115, 2125, 2121, 2119, 2133, 2137, 2180, 2123, 2152, 2150, 2164, 2142, 2150, 2156, 2176, 2180, 2198, 2191, 2226, 2196, 2197, 2212], [2064, 2036, 2076, 2115, 2043, 2048, 2090, 2074, 2086, 2088, 2121, 2087, 2092, 2097, 2133, 2092, 2116, 2109, 2114, 2126, 2120, 2128, 2120, 2115, 2116, 2140, 2123, 2190, 2161, 2150, 2150, 2173, 2184, 2155, 2169, 2172, 2163, 2206, 2223, 2181, 2236], [2086, 2055, 2038, 2049, 2057, 2052, 2088, 2050, 2068, 2082, 2118, 2098, 2093, 2092, 2077, 2145, 2132, 2128, 2120, 2108, 2136, 2132, 2117, 2119, 2153, 2155, 2182, 2165, 2138, 2162, 2197, 2178, 2149, 2195, 2161, 2166, 2178, 2210, 2218, 2191, 2231], [2064, 2064, 2052, 2063, 2042, 2060, 2079, 2075, 2075, 2076, 2060, 2073, 2085, 2045, 2101, 2093, 2131, 2151, 2132, 2141, 2106, 2104, 2124, 2120, 2113, 2192, 2132, 2148, 2173, 2167, 2168, 2176, 2171, 2213, 2197, 2170, 2216, 2204, 2190, 2211, 2224], [2045, 2032, 2065, 2076, 2070, 2055, 2090, 2076, 2060, 2087, 2132, 2055, 2065, 2097, 2076, 2095, 2109, 2088, 2131, 2145, 2150, 2101, 2169, 2131, 2130, 2157, 2115, 2118, 2153, 2150, 2172, 2168, 2182, 2179, 2170, 2197, 2171, 2211, 2220, 2227, 2196], [2049, 2030, 2077, 2064, 2085, 2068, 2049, 2079, 2073, 2055, 2072, 2068, 2081, 2094, 2110, 2088, 2096, 2118, 2120, 2137, 2109, 2136, 2121, 2142, 2107, 2126, 2169, 2166, 2151, 2153, 2173, 2140, 2187, 2213, 2177, 2161, 2181, 2216, 2219, 2228, 2225], [2057, 2050, 2041, 2056, 2065, 2038, 2051, 2090, 2051, 2070, 2085, 2066, 2065, 2087, 2104, 2099, 2099, 2108, 2114, 2135, 2119, 2126, 2127, 2117, 2139, 2151, 2128, 2148, 2128, 2160, 2173, 2151, 2159, 2157, 2179, 2181, 2185, 2218, 2223, 2225, 2194], [2056, 2060, 2082, 2070, 2075, 2094, 2053, 2073, 2068, 2056, 2093, 2083, 2085, 2085, 2127, 2111, 2107, 2112, 2143, 2131, 2118, 2131, 2135, 2186, 2144, 2141, 2108, 2149, 2123, 2160, 2171, 2175, 2177, 2172, 2180, 2179, 2165, 2213, 2201, 2209, 2165], [2074, 2063, 2069, 2052, 2067, 2061, 2065, 2075, 2075, 2066, 2090, 2075, 2090, 2128, 2110, 2116, 2115, 2119, 2104, 2123, 2125, 2128, 2091, 2127, 2121, 2131, 2136, 2167, 2190, 2163, 2161, 2156, 2222, 2178, 2170, 2143, 2177, 2211, 2215, 2214, 2216], [2054, 2026, 2058, 2073, 2064, 2068, 2071, 2103, 2092, 2127, 2080, 2100, 2074, 2085, 2140, 2110, 2126, 2105, 2117, 2108, 2113, 2132, 2122, 2127, 2152, 2148, 2140, 2152, 2154, 2154, 2164, 2220, 2183, 2167, 2164, 2170, 2175, 2205, 2215, 2221, 2213], [2046, 2057, 2062, 2052, 2071, 2057, 2111, 2075, 2051, 2054, 2093, 2094, 2086, 2117, 2104, 2117, 2109, 2097, 2122, 2164, 2132, 2144, 2149, 2137, 2111, 2113, 2144, 2133, 2163, 2186, 2166, 2206, 2155, 2190, 2180, 2168, 2192, 2188, 2215, 2207, 2224], [2085, 2082, 2066, 2055, 2068, 2070, 2051, 2055, 2076, 2130, 2076, 2085, 2107, 2073, 2096, 2110, 2145, 2137, 2143, 2107, 2125, 2125, 2164, 2112, 2126, 2123, 2133, 2164, 2158, 2154, 2158, 2147, 2170, 2192, 2160, 2175, 2203, 2198, 2216, 2241, 2245], [2048, 2046, 2110, 2078, 2083, 2071, 2066, 2069, 2089, 2078, 2067, 2081, 2093, 2080, 2084, 2123, 2116, 2106, 2142, 2134, 2119, 2163, 2105, 2136, 2142, 2129, 2141, 2126, 2149, 2159, 2171, 2195, 2163, 2144, 2232, 2228, 2170, 2201, 2205, 2215, 2210], [2055, 2060, 2067, 2061, 2057, 2093, 2080, 2089, 2097, 2130, 2074, 2132, 2100, 2071, 2129, 2082, 2105, 2078, 2112, 2147, 2128, 2113, 2139, 2127, 2111, 2116, 2154, 2147, 2159, 2179, 2175, 2139, 2166, 2176, 2184, 2164, 2162, 2176, 2210, 2215, 2240], [2041, 2051, 2056, 2113, 2066, 2089, 2073, 2055, 2090, 2071, 2072, 2073, 2050, 2099, 2078, 2100, 2116, 2098, 2130, 2100, 2117, 2135, 2110, 2128, 2182, 2129, 2109, 2130, 2155, 2146, 2156, 2174, 2165, 2129, 2171, 2180, 2186, 2206, 2236, 2215, 2204], [2050, 2057, 2012, 2101, 2059, 2072, 2059, 2067, 2083, 2134, 2108, 2077, 2064, 2083, 2098, 2131, 2130, 2100, 2127, 2142, 2130, 2140, 2130, 2119, 2137, 2149, 2144, 2170, 2153, 2176, 2171, 2154, 2225, 2172, 2174, 2183, 2204, 2217, 2198, 2205, 2271], [2031, 2060, 2090, 2027, 2090, 2054, 2069, 2071, 2077, 2076, 2097, 2085, 2079, 2095, 2093, 2114, 2107, 2152, 2101, 2141, 2122, 2150, 2119, 2122, 2130, 2127, 2133, 2163, 2148, 2155, 2184, 2156, 2173, 2168, 2170, 2212, 2177, 2205, 2230, 2239, 2184], [2045, 2038, 2058, 2071, 2080, 2071, 2078, 2066, 2079, 2075, 2081, 2102, 2104, 2096, 2107, 2158, 2109, 2136, 2102, 2110, 2133, 2147, 2122, 2132, 2135, 2127, 2119, 2163, 2145, 2163, 2145, 2151, 2170, 2173, 2191, 2167, 2184, 2196, 2202, 2254, 2248], [2073, 2078, 2058, 2058, 2055, 2065, 2093, 2048, 2075, 2094, 2060, 2097, 2075, 2085, 2146, 2109, 2116, 2159, 2134, 2106, 2120, 2121, 2130, 2125, 2148, 2167, 2151, 2154, 2179, 2158, 2154, 2168, 2166, 2193, 2187, 2180, 2174, 2207, 2231, 2190, 2214], [2057, 2042, 2071, 2051, 2073, 2082, 2090, 2082, 2062, 2069, 2077, 2089, 2104, 2063, 2086, 2100, 2098, 2134, 2102, 2085, 2133, 2114, 2154, 2123, 2115, 2171, 2124, 2182, 2156, 2178, 2161, 2168, 2216, 2161, 2163, 2180, 2173, 2231, 2211, 2223, 2270], [2053, 2043, 2062, 2053, 2061, 2119, 2078, 2076, 2075, 2093, 2061, 2050, 2079, 2089, 2089, 2092, 2100, 2116, 2120, 2125, 2138, 2115, 2130, 2122, 2145, 2132, 2140, 2134, 2159, 2145, 2149, 2166, 2169, 2146, 2173, 2176, 2184, 2222, 2248, 2231, 2206], [2024, 2057, 2066, 2065, 2070, 2059, 2051, 2072, 2128, 2065, 2085, 2059, 2074, 2099, 2100, 2098, 2106, 2154, 2116, 2098, 2119, 2116, 2144, 2142, 2125, 2130, 2150, 2150, 2166, 2154, 2154, 2175, 2166, 2218, 2169, 2177, 2164, 2248, 2247, 2234, 2230], [2058, 2047, 2085, 2097, 2050, 2078, 2077, 2126, 2087, 2047, 2063, 2085, 2117, 2085, 2090, 2107, 2107, 2141, 2104, 2103, 2116, 2132, 2136, 2143, 2160, 2112, 2175, 2143, 2142, 2149, 2132, 2167, 2183, 2170, 2172, 2182, 2172, 2247, 2218, 2220, 2190], [2051, 2043, 2063, 2082, 2052, 2083, 2098, 2067, 2063, 2056, 2088, 2083, 2116, 2099, 2068, 2112, 2091, 2162, 2134, 2127, 2130, 2139, 2139, 2122, 2126, 2126, 2149, 2154, 2137, 2159, 2208, 2165, 2158, 2152, 2188, 2203, 2199, 2201, 2202, 2195, 2214], [2045, 2051, 2068, 2089, 2065, 2044, 2064, 2055, 2064, 2084, 2076, 2096, 2091, 2095, 2108, 2123, 2107, 2124, 2105, 2119, 2115, 2124, 2121, 2113, 2133, 2133, 2126, 2149, 2126, 2160, 2190, 2154, 2161, 2206, 2179, 2224, 2162, 2205, 2213, 2202, 2221], [2045, 2048, 2066, 2086, 2047, 2111, 2077, 2058, 2059, 2070, 2083, 2063, 2108, 2099, 2098, 2136, 2111, 2139, 2108, 2119, 2115, 2114, 2124, 2130, 2118, 2128, 2133, 2190, 2164, 2176, 2137, 2163, 2165, 2190, 2190, 2182, 2206, 2168, 2209, 2224, 2203], [2052, 2068, 2047, 2067, 2049, 2119, 2065, 2060, 2062, 2078, 2104, 2055, 2088, 2112, 2120, 2084, 2102, 2101, 2137, 2107, 2145, 2139, 2117, 2120, 2124, 2160, 2116, 2139, 2134, 2145, 2144, 2163, 2173, 2160, 2169, 2167, 2165, 2231, 2232, 2218, 2226]]




CPU_time_limit = 14400

# 1 Data input
Lambda = 0
Alpha = 0



#print(len(scenario_time_list[0]))
det = len(F) + 1        # dummy_ending_task
Fs = [0] + F
Fe = F + [det]
N = [0] + F + [det]




C_apron = 2000
C_E = 40
C_D = 30
C_C = 20


b = 10



max_at= 0
for sat in scenario_arrival_time:
    for at in sat:
        if at > max_at:
            max_at = at
M = (max_at + sum(occupy_time) + b * len(F)) * 10 + 0.00001
print(M)







Binary_Ykij = []
k_counter = 0
while k_counter < len(K):
    sub_binary_Yij = []
    i_counter = 0
    while i_counter < len(N):
        sub_sy = []
        j_counter = 0
        while j_counter < len(N):
            sub_sy.append(0)
            j_counter += 1
        i_counter += 1
        sub_binary_Yij.append(sub_sy)
    k_counter += 1
    Binary_Ykij.append(copy.deepcopy(sub_binary_Yij))


test_Pi = []
test_Sigma = []
test_Tau = []

i_counter = 0
while i_counter < len(N):
    test_Pi.append(0)
    test_Sigma.append(0)
    i_counter += 1

i_counter = 0
while i_counter < len(N):
    sub_list = []
    j_counter = 0
    while j_counter < len(N):
        sub_list.append(0)
        j_counter += 1
    test_Tau.append(copy.deepcopy(sub_list))
    i_counter += 1
#print(test_Sum_Psi)


# Benders optimality cuts list
Subtour_elimination_cuts = []
Optimality_cuts_info = []



founded_cuts = []







# Enhancements
# 1 Lower bound lifting inequalities
Dij_list = LBL(F, F_E, F_D, F_C, OMEGA, scenario_arrival_time, occupy_time, b, C_E, C_D, C_C)





UB = 1000000000
LB = 0
GAP = UB - LB

iteration_counter = 1

start_time = time.time()
CPU_time = time.time() - start_time




# 3 BUILD THE MODEL
model = Model('MP')
model.Params.timelimit = CPU_time_limit
#model.setParam('OutputFlag', 0)
model.Params.MIPGap = 0.0000001




# Decision variables
x = {}
y = {}
theta = {}

upsilon = {}

for k in K_all:
    for i in F:
        name = 'x_' + str(k) + '_' + str(i)
        x[k, i] = model.addVar(vtype=GRB.BINARY, name=name)

for k in K:
    for i in Fs:
        for j in Fe:
            if i != j:
                name = 'y_' + str(k) + '_' + str(i) + '_' + str(j)
                y[k, i, j] = model.addVar(vtype=GRB.BINARY, name=name)

for k in K:
    for omega in OMEGA:
        name = 'theta_' + str(k) + '_' + str(omega)
        theta[k, omega] = model.addVar(vtype=GRB.CONTINUOUS, name=name)

for omega in OMEGA:
    name = 'upsilon_' + str(omega)
    upsilon[omega] = model.addVar(vtype=GRB.CONTINUOUS, name=name)

name = 'eta'
eta = model.addVar(lb=-float('inf'), ub=float('inf'), vtype=GRB.CONTINUOUS, name=name)

# 18a
obj = LinExpr(0)
for k in r:
    for i in F:
        obj.addTerms((1 + Lambda) * C_apron, x[k, i])
for k in K:
    for omega in OMEGA:
        obj.addTerms(scenario_weight, theta[k, omega])
obj.addTerms(Lambda, eta)
for omega in OMEGA:
    obj.addTerms(scenario_weight * (Lambda / (1 - Alpha)), upsilon[omega])
model.setObjective(obj, GRB.MINIMIZE)
model.Params.lazyConstraints = 1

# First-stage problem
# 1b
for i in F:
    expr = LinExpr(0)
    for k in K_all:
        expr.addTerms(1, x[k, i])
    model.addConstr(expr == 1)
# 1c
for k in K_D + K_C:
    for i in F_E:
        model.addConstr(x[k, i] <= 0)
# 1d
for k in K_C:
    for i in F_D:
        model.addConstr(x[k, i] <= 0)
# 1e
for k in K:
    for i in F:
        expr = LinExpr(0)
        for j in Fe:
            if i != j:
                expr.addTerms(1, y[k, i, j])
        model.addConstr(expr == x[k, i])
# 1f
for k in K:
    expr = LinExpr(0)
    for j in Fe:
        expr.addTerms(1, y[k, Fs[0], j])
    model.addConstr(expr == 1)
# 1g
for k in K:
    expr = LinExpr(0)
    for i in Fs:
        expr.addTerms(1, y[k, i, Fe[-1]])
    model.addConstr(expr == 1)
# 1h
for k in K:
    for i in F:
        expr1, expr2 = LinExpr(0), LinExpr(0)
        for j in Fs:
            if i != j:
                expr1.addTerms(1, y[k, j, i])
        for j in Fe:
            if i != j:
                expr2.addTerms(1, y[k, i, j])
        model.addConstr(expr1 == expr2)
# 18b
for omega in OMEGA:
    expr = LinExpr(0)
    for k in K:
        expr.addTerms(1, theta[k, omega])
    model.addConstr(upsilon[omega] >= expr - eta)
# 19 LBL
for omega in OMEGA:
    expr1, expr2 = LinExpr(0), LinExpr(0)
    for k in K:
        expr1.addTerms(1, theta[k, omega])
        for i in F:
            for j in F:
                if i != j:
                    expr2.addTerms(Dij_list[omega - 1][i - 1][j - 1], y[k, i, j])
    model.addConstr(expr1 >= expr2)



# 定义Callback函数
def mycallback(model, where):
    if where == GRB.Callback.MIPSOL:
        # 获取当前节点的变量取值
        x_val = model.cbGetSolution(x)
        y_val = model.cbGetSolution(y)

        Xki_list = []
        k_counter = 0
        while k_counter < len(K):
            k_list = []
            for key in x_val.keys():
                if key[0] == k_counter + 1:
                    if round(x_val[key], 6) >= 0.9:
                        k_list.append(key[1])
            k_counter += 1
            Xki_list.append(k_list)

        Ykij_list = []
        for k in K:
            sub_yij_list = []
            for key in y_val.keys():
                if key[0] == k:
                    if y_val[key] > 0.9:
                        sub_yij_list.append([key[1], key[2]])
            Ykij_list.append(copy.deepcopy(sub_yij_list))

        test_Binary_Ykij = copy.deepcopy(Binary_Ykij)
        # Update Y
        for key in y_val.keys():
            for k in K:
                if key[0] == k:
                    if key[1] != Fs[0]:
                        if key[2] != Fe[-1]:
                            if round(y_val[key]) > 0.9:
                                test_Binary_Ykij[key[0] - 1][key[1]][key[2]] += 1


        '''print(Xgi_list)
        print(Ygij_list)
        print('\n')'''

        subtour_counter_list = []
        for Yij in Ykij_list:
            subtour_list = subtour_check(Yij, N)
            if len(subtour_list) > 0:
                subtour_counter_list.append(1)
            else:
                subtour_counter_list.append(0)
            for sl in subtour_list:
                for k in K:
                    expr = LinExpr(0)
                    for arc in sl:
                        expr.addTerms(1, y[k, arc[0], arc[1]])
                    model.cbLazy(expr <= len(sl) - 1)


        gate_counter = 0
        while gate_counter < len(subtour_counter_list):

            if subtour_counter_list[gate_counter] == 0:

                sub_F = copy.deepcopy(Xki_list[gate_counter])
                test_Binary_Yij = copy.deepcopy(test_Binary_Ykij[gate_counter])

                if len(sub_F) > 1:

                    if sub_F not in founded_cuts:
                        founded_cuts.append(copy.deepcopy(test_Binary_Yij))

                        E_counter, D_counter, C_counter = 0, 0, 0
                        for aircraft in sub_F:
                            if aircraft in F_E:
                                E_counter = 1
                                break
                        if E_counter == 0:
                            for aircraft in sub_F:
                                if aircraft in F_D:
                                    D_counter = 1
                                    break
                        if E_counter == 0 and D_counter == 0:
                            C_counter = 1

                        if E_counter == 1:
                            gate_info_list = copy.deepcopy(K_E)  # Gh
                        elif D_counter == 1:
                            gate_info_list = copy.deepcopy(K_E + K_D)  # Gh + Gl
                        elif C_counter == 1:
                            gate_info_list = K

                        for omega in OMEGA:
                            arrival_time = copy.deepcopy(scenario_arrival_time[omega - 1])
                            SP_result = SP(sub_F, F_E, F_D, F_C, arrival_time, occupy_time, C_E, C_D, C_C, M, b,
                                           test_Binary_Yij, test_Pi, test_Sigma, test_Tau)
                            optimality_cut = copy.deepcopy(SP_result[1:])

                            for k in gate_info_list:
                                pi_info = copy.deepcopy(optimality_cut[0])
                                sigma_info = copy.deepcopy(optimality_cut[1])
                                tau_info = copy.deepcopy(optimality_cut[2])

                                para = 0
                                for i in sub_F:
                                    para += scenario_arrival_time[omega - 1][i - 1] * pi_info[i]
                                    para += scenario_arrival_time[omega - 1][i - 1] * sigma_info[i]
                                    for j in sub_F:
                                        if i != j:
                                            para += (M - occupy_time[i - 1] - b) * tau_info[i][j]

                                expr = LinExpr(0)
                                for i in sub_F:
                                    for j in sub_F:
                                        if i != j:
                                            expr.addTerms(tau_info[i][j], y[k, i, j])

                                model.cbLazy(theta[k, omega] >= para - M * expr)



            gate_counter += 1



# 3.5 solve the model
model.optimize(mycallback)


# 打印结果
# print("\n\n-----optimal value-----")
# print(model.Objval)
objective_value = model.Objval


print('\n')
# 需要返回的内容
# optimlaity gap
mip_gap = model.MIPGap
print(mip_gap)

# 计算时间
CPU_time = time.time() - start_time
print(CPU_time)

# Objective value
print(objective_value)

# Solution
Xk_list = []
k_counter = 0
while k_counter < len(K_all):
    k_list = []
    for key in x.keys():
        if key[0] == k_counter + 1:
            if round(x[key].x, 6) >= 0.9:
                k_list.append(key[1])
    k_counter += 1
    Xk_list.append(k_list)
print("Xk_list = " + str(Xk_list))

Ykij_list = []
for k in K:
    sub_yij_list = []
    for key in y.keys():
        if key[0] == k:
            if y[key].x > 0.9:
                sub_yij_list.append([key[1], key[2]])
    Ykij_list.append(copy.deepcopy(sub_yij_list))
print("Ykij_list = " + str(Ykij_list))


#print(upper_bound_list)
#print(lower_bound_list)














